import pybullet as p
import time
import pybullet_data
import matplotlib.pyplot as plt
import numpy as np

# Инициализация PyBullet
p.connect(p.GUI)
p.setAdditionalSearchPath(pybullet_data.getDataPath())

# Создание плоскости
p.loadURDF("plane.urdf")

# Устанавливаем положение и ориентацию камеры
camera_distance = 2.5  # Расстояние от камеры до целевой точки
camera_pitch = 0  # Угол наклона камеры (в градусах)
camera_yaw = 0     # Угол поворота камеры (в градусах)
position = [1, 0, 1.5]  # Точка, на которую направлена камера

p.resetDebugVisualizerCamera(camera_distance, camera_yaw, camera_pitch, position)

dt = 1/240      # pybullet simulation step 

# Размерности 
radius, height = 0.04, 0.06                         # Цилиндр
width_leg, depth_leg, length_leg = 0.07, 0.06, 0.5  # Плечо
length_platform = 0.25                              # Bi
a = np.array([[2, 2], [2, 1.1], [0, 1]]) # Координаты неподвижных платформ

# Примеры
d1 = [0.8561027164166857, 1.4239614999390986, -0.7335754112327715]
d2 = [1.02582, 1.35344, -0.29031]
d3 = [0.91974, 1.42904, -0.30708]
d4 = [1.05736, 1.43764, -0.37268]
d5 = [1.09509, 1.39992, -0.07958]
d = d1

# Желаемые координаты
target_position = np.array(d[0:2])
target_angle = d[2]

cyl_rot = p.getQuaternionFromEuler([np.pi/2, 0, 0]) 
zero_rot = p.getQuaternionFromEuler([0, 0, 0])
base_position = [1, 0, 1.3]

# Создание визуальной и коллизионной форм для 6 ног поршней
leg_visual_shape, leg_collision_shape = [], []
for i in range(6):
    leg_visual_shape.append(p.createVisualShape(p.GEOM_BOX, halfExtents=[width_leg/2, depth_leg/2, length_leg/2], rgbaColor=[0.25, 0.875, 0.8125, 1]))
    leg_collision_shape.append(p.createCollisionShape(p.GEOM_BOX, halfExtents=[width_leg/2, depth_leg/2, length_leg/2]))

# Создание визуальной и коллизионной форм для 3 внутренних ног
plat_leg_visual_shape, plat_leg_collision_shape = [], []
for i in range(3):
    plat_leg_visual_shape.append(p.createVisualShape(p.GEOM_BOX, halfExtents=[width_leg/2, depth_leg/2, length_platform/2], rgbaColor=[0.25, 0.5, 1, 1]))
    plat_leg_collision_shape.append(p.createCollisionShape(p.GEOM_BOX, halfExtents=[width_leg/2, depth_leg/2, length_platform/2]))

# Создание визуальной и коллизионной форм для 6 внутренних joint
joint_collision_shape, joint_visual_shape = [], []
for i in range(7):
    joint_visual_shape.append(p.createVisualShape(p.GEOM_CYLINDER, radius=radius, length=height, rgbaColor=[1, 0.5, 0.3125, 1]))
    joint_collision_shape.append(p.createCollisionShape(p.GEOM_CYLINDER, radius=radius, height=height))

# Расчет для начального положения
# h1 = ((base_position[0]- a[0][0])**2 + (base_position[2] + length_platform - a[0][1])**2)**(1/2)
# g1 = (base_position[0] - a[0][0])

# h2 = ((base_position[0] + 3**(1/2)/2*length_platform - a[1][0])**2 + (base_position[2] -1/2*length_platform - a[1][1])**2)**(1/2)
# g2 = (-base_position[0] - 3**(1/2)/2*length_platform + a[1][0])

# h3 = ((base_position[0] - 3**(1/2)/2*length_platform - a[2][0])**2 + (base_position[2] -1/2*length_platform - a[2][1])**2)**(1/2)
# g3 = (base_position[0] - 3**(1/2)/2*length_platform - a[2][0])

# Создание трёх неподвижных тел
# База - крутящийся шарнир. Соединения - 2 плеча, соединных призматическим соединением
anchor_id_1 = p.createMultiBody(
    baseMass=0,                          
    basePosition=[a[0][0], 0, a[0][1]],      
    baseCollisionShapeIndex=joint_collision_shape[0],          
    baseVisualShapeIndex=joint_visual_shape[0],
    baseOrientation=cyl_rot,
    linkMasses=[0.1] * 2,
    linkCollisionShapeIndices=[-1] + [leg_collision_shape[0]],
    linkVisualShapeIndices=leg_visual_shape[0:2],
    linkPositions=[[0, 0, 0], [0, 0, -length_leg/2]],
    linkOrientations=[p.getQuaternionFromEuler([-np.pi/2, 0, 2/3*np.pi])] + [zero_rot],
    linkInertialFramePositions=[[0, 0, 0]] * 2,
    linkInertialFrameOrientations=[[zero_rot]] * 2,
    linkParentIndices=[0, 1],
    linkJointTypes=[p.JOINT_REVOLUTE, p.JOINT_PRISMATIC],
    linkJointAxis=[[0, 1, 0], [0, 0, 1]] 
)
# anchor_id_2 = p.createMultiBody(
#     baseMass=0,                          
#     basePosition=[a[1][0], 0, a[1][1]],      
#     baseCollisionShapeIndex=joint_collision_shape[1],          
#     baseVisualShapeIndex=joint_visual_shape[1],
#     baseOrientation=cyl_rot,
#     linkMasses=[0.1] * 2,
#     linkCollisionShapeIndices=[-1] + [leg_collision_shape[2]],
#     linkVisualShapeIndices=leg_visual_shape[2:4],
#     linkPositions=[[0, 0, 0], [0, 0, -length_leg/2]],
#     linkOrientations=[p.getQuaternionFromEuler([-np.pi/2, 0, np.pi/2 - np.arccos(g2/h2)])] + [zero_rot] ,
#     linkInertialFramePositions=[[0, 0, 0]] * 2,
#     linkInertialFrameOrientations=[[zero_rot]] * 2,
#     linkParentIndices=[0, 1],
#     linkJointTypes=[p.JOINT_REVOLUTE, p.JOINT_PRISMATIC],
#     linkJointAxis=[[0, 1, 0], [0, 0, 1]] 
# )
anchor_id_3 = p.createMultiBody(
    baseMass=0,                          
    basePosition=[a[2][0], 0, a[2][1]],      
    baseCollisionShapeIndex=joint_collision_shape[2],          
    baseVisualShapeIndex=joint_visual_shape[2],
    baseOrientation=cyl_rot,
    linkMasses=[0.1] * 2,
    linkCollisionShapeIndices=[-1] + [leg_collision_shape[4]],
    linkVisualShapeIndices=leg_visual_shape[4:6],
    linkPositions=[[0, 0, 0], [0, 0, -length_leg/2]],
    linkOrientations=[p.getQuaternionFromEuler([-np.pi/2, 0, -1/3*np.pi])] + [zero_rot] ,
    linkInertialFramePositions=[[0, 0, 0]] * 2,
    linkInertialFrameOrientations=[[zero_rot]] * 2,
    linkParentIndices=[0, 1],
    linkJointTypes=[p.JOINT_REVOLUTE, p.JOINT_PRISMATIC],
    linkJointAxis=[[0, 1, 0], [0, 0, 1]] 
)

# Создание платформы
# platform_id = p.createMultiBody(
#     baseMass=0.2,
#     baseCollisionShapeIndex=joint_collision_shape[3],
#     baseVisualShapeIndex=joint_visual_shape[3],
#     basePosition=base_position,
#     baseOrientation=cyl_rot,
#     linkMasses=[0.1]*2,
#     #linkCollisionShapeIndices=plat_leg_collision_shape + joint_collision_shape[4:7],
#     linkCollisionShapeIndices=[-1, joint_collision_shape[4]],
#     linkVisualShapeIndices=[plat_leg_visual_shape[0], joint_visual_shape[4]],
#     linkPositions=[[0, length_platform/2, 0], [0, 0, length_platform/2]],
#     linkOrientations=[p.getQuaternionFromEuler([-np.pi/2, 0, 0]), [cyl_rot]],
#     linkInertialFramePositions=[[0, 0, 0]] * 2,
#     linkInertialFrameOrientations=[[zero_rot]] * 2,
#     linkParentIndices=[0, 1],
#     linkJointTypes=[p.JOINT_REVOLUTE] * 2,
#     linkJointAxis=[[0, 0, 1]] * 2
# )

# Настройка гравитации
# p.setGravity(0, 0, -9.81)

# Соединение приводов с платформой
# constraint_id_1 = p.createConstraint(
#     parentBodyUniqueId=anchor_id_1, 
#     parentLinkIndex=1,
#     childBodyUniqueId=platform_id,
#     childLinkIndex=1,
#     parentFrameOrientation=p.getQuaternionFromEuler([0, 0, np.pi]),
#     childFrameOrientation=p.getQuaternionFromEuler([np.pi/2, 0, 0]),
#     jointType=p.JOINT_FIXED, 
#     jointAxis=[0, 0, 0],  
#     parentFramePosition=[0, 0, length_leg/2],  
#     childFramePosition=[0, radius, 0]  
# )
constraint_id_3 = p.createConstraint(
    parentBodyUniqueId=anchor_id_3, 
    parentLinkIndex=1,
    childBodyUniqueId=anchor_id_1,
    childLinkIndex=1,
    parentFrameOrientation=p.getQuaternionFromEuler([0, 0, 0]),
    childFrameOrientation=p.getQuaternionFromEuler([0, 0, 0]),
    jointType=p.JOINT_POINT2POINT, 
    jointAxis=[0, 0, 0],  
    parentFramePosition=[0, 0, length_leg/2 + radius/2],  
    childFramePosition=[0, 0, length_leg/2 + radius/2]  
)


# На стартовую позицию
for i in range(1, 240):
    p.stepSimulation()
    #time.sleep(dt)

# Создание массивов для графиков
t = np.array([0])
# x, y, angle = np.array([p.getBasePositionAndOrientation(platform_id)[0][0]]),\
#               np.array([p.getBasePositionAndOrientation(platform_id)[0][2]]),\
#               np.array([p.getEulerFromQuaternion(p.getBasePositionAndOrientation(platform_id)[1])[1]])
leg_1, leg_3 = np.array([p.getJointState(anchor_id_1, 1)[0]]),\
               np.array([p.getJointState(anchor_id_3, 1)[0]])

for i in range(1, 2400):


    p.setJointMotorControl2(anchor_id_1, 1, controlMode=p.VELOCITY_CONTROL, targetVelocity=1, force=200)
    p.setJointMotorControl2(anchor_id_3, 1, controlMode=p.VELOCITY_CONTROL, targetVelocity=-1, force=200)
    # x = np.append(x, p.getBasePositionAndOrientation(platform_id)[0][0])
    # y = np.append(y, p.getBasePositionAndOrientation(platform_id)[0][2])
    # angle = np.append(angle, p.getEulerFromQuaternion(p.getBasePositionAndOrientation(platform_id)[1])[1])
    leg_1 = np.append(leg_1, p.getJointState(anchor_id_1, 1)[0])
    leg_3 = np.append(leg_3, p.getJointState(anchor_id_3, 1)[0])
    t = np.append(t, t[-1]+dt)

    time.sleep(dt)
    p.stepSimulation()

#angle = angle * 180/np.pi

# Завершение симуляции
p.disconnect

# print ('Желаемые координаты и угол:', np.round(target_position, 5), np.round(target_angle, 5))
# print ('Фактические координаты и угол:', round(x[-1], 5), round(y[-1], 5), round(angle[-1], 5))

# Отрисовка графиков
# plt.figure('')
# plt.subplot(4, 1, 1)
# plt.grid(True)
# plt.title('Приведение из {0} в положение {1}'.format(round(angle[0], 4), round(target_angle, 4)))
# plt.title('Скорость и Якобиан')
# plt.xlabel('Время')
# plt.ylabel('Координата X')
# # plt.axhline(y = target_position[0], color='r', linestyle='dashed')
# plt.plot(t, x)
# plt.subplot(4, 1, 2)
# plt.grid(True)
# plt.xlabel('Время')
# plt.ylabel('Координата Y')
# # plt.axhline(y = target_position[1], color='r', linestyle='dashed')
# plt.plot(t, y)
# plt.subplot(4, 1, 3)
# plt.grid(True)
# plt.xlabel('Время')
# plt.ylabel('Угол')
# # plt.axhline(y = target_angle, color='r', linestyle='dashed')
# plt.plot(t, angle)
# plt.subplot(4, 1, 4)
# plt.grid(True)
# plt.xlabel('X')
# plt.ylabel('Y(X)')
# plt.plot(x, y)

plt.figure('leg')
plt.subplot(2, 1, 1)
plt.grid(True)
plt.xlabel('Время')
plt.ylabel('Длина')
# plt.axhline(y = s[0], color='r', linestyle='dashed')
plt.plot(t, leg_1)
plt.subplot(2, 1, 2)
plt.grid(True)
plt.xlabel('Время')
plt.ylabel('Длина')
# plt.axhline(y = s[2], color='r', linestyle='dashed')
plt.plot(t, leg_3)
plt.show()
